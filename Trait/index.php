<?php/** * Created by Viktor Lazhevskyi. * User: viktor.lazhevskyi@gmail.com * Date: 19.01.2019 * Time: 22:56 */trait PriceUtilites{    function calculateTax($price)    {        return (($this->getTaxRate() / 100) * $price);    }    abstract public function getTaxRate();}trait TaxTool{    function calculateTax($price)    {        return (($this->getTaxRate() / 100) * $price);    }}abstract class Service{}class UtilityService extends Service{    use PriceUtilites, TaxTool {        PriceUtilites::calculateTax insteadof TaxTool;        PriceUtilites::calculateTax as private;        TaxTool::calculateTax as calculateTax_Tool;    }    private $price;    public function __construct($price)    {        $this->price = $price;    }    public function getTaxRate()    {        // TODO: Implement geTaxRate() method.        return 17;    }    public function getFinalPrice()    {        return ($this->price + $this->calculateTax($this->price));    }}$u = new UtilityService(345);print $u->getFinalPrice() . "\n";